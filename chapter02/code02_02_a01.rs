use num::{integer, Float};

fn main() {
    // 四則演算
    println!("{}", 869 + 120); // 989 と出力
    println!("{}", 869 - 120); // 749 と出力
    println!("{}", 869 * 120); // 104280 と出力
    println!("{}", 869 / 120); // 7 と出力（ここでは整数部分のみを出力することに注意）

    // 剰余（mod）
    println!("{}", 8 % 5); // 3 と出力
    println!("{}", 869 % 120); // 29 と出力

    // 絶対値（abs）
    println!("{}", (-45i16).abs()); // 45 と出力
    println!("{}", 15i16.abs()); // 15 と出力

    // 累乗（pow）
    // 浮動小数点数どうしのべき乗
    println!("{}", 10f64.powf(2f64));
    // 底は浮動小数点数型、冪指数は整数型
    // 結果は浮動小数点数型で返す
    println!("{}", 10f64.powi(2i32));
    // 底、冪指数共に整数型を取り、結果も整数型で返す
    println!("{}", 10i64.pow(2u32));
    // 浮動小数点数どうしのべき乗
    println!("{}", 3f64.powf(4f64));
    // 底は浮動小数点数型、冪指数は整数型
    // 結果は浮動小数点数型で返す
    println!("{}", 3f64.powi(4i32));
    // 底、冪指数共に整数型を取り、結果も整数型で返す
    println!("{}", 3i64.pow(4u32));
    // ルート（sqrt）
    println!("{}", integer::sqrt(4)); // 2 と出力
    println!("{}", Float::sqrt(4.0)); // 2 と出力
    println!("{}", integer::sqrt(2)); // 1 と出力
    println!("{}", Float::sqrt(2.0)); // 1.41421... と出力
}
